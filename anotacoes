npm create vite@latest <nome do projeto> --template react
cd <nome_do_projeto>
npm install
npm run dev
Necessário instalar o **react-router-dom**
npm install react-router-dom 
.
***1-useState***
Sendo um dos priceipais hooks do React, serve para gerenciar valores, sendo possível consultar e alterar uma veriavel.
Isso nos permite re-renderizar um componente, o que não acontece com a manipulação de variaveis.

Para se criar um **useState** é necessário importar ele: import {useState} from "react";
Depois necessário criar um variavel e um setVariavel, recebendo alguma informação:
let userName = "João" < Variavel normal >
const [name,setName] = useState("Rafael")
Para exibir: <p>useState: {name}</p>

Para fazer uma alteração, em caso de nome de variaveis comuns, que não usa o useState, como por exemplo: let userName = "joão" que vai passar a ser "João Mosca", fazer essa variavel userName = "João Mosca" não irá mostar em tela quando se clica em um "button".
Já variaveis que utiliza do uso de "useState" serão alteradas ao se clicar no "button". Sendo necessário somente criar uma função para fazer essa alteração.
Exemplo:

const changeNam=()=>{
    userName = "João Mosca";
    setName("Matheus Doce");
}
<button onClick={chageName}>Clique</button>

A variavel "userName" não vai ser alterado em tela, já o useState irá mudar. Caso queria realmente confirmar, utiliar um console.log(userName) irá confirmar que no console está sendo alterado.
_________________________________________________________________
_________________________________________________________________
_________________________________________________________________

*** 2 - useState e inputs ***
Atrelando o useState a um input podemos fazer algumas ações, como alterações de um state por evento de "onChange".
Fazer a limpeza de inputs usando o "Controlled Input", após preenchimento total do form, unir os states e fazer um envio dos dados para o back-end.
Para começar necessáro criar uma variavel que vai receber a informação:
const [age,setAge] = useState(18);
Depois necessário criar o form e o input
<form onSubmit={handleSubmit}>
    <input type="text" value={age} onChange={(e)=>setAge(e.target.value)}/>
    // No caso desse (e), é a passagem do elemento.
    <input type="submit" value="Enviar"/>
</form>
Agora na parte lógicia, será criada a função "handleSubmit":
const handleSubmit=(e)=>{
    e.preventDefault();
    //faz com que não seja "resetao" a pg ao clicar em enviar. Mantendo as informações no input.
}

_________________________________________________________________
_________________________________________________________________
_________________________________________________________________

***useReducer***
Tem a mesma função que o useState, ele gerencia valores, porém temos a possibilidade de executar uam função na hora da alteração do valor.
Então temos que useReducer recebe um valor para gerenciar e uma função para alterar este valor.

Para começar é necessário criar uma variavel, porem agora usando "useReducer":
const [number,dispatch] = useReducer ((state,action)=>{
    return Math.random(state) // state === number, que no caso vai receber um n° aleatório devido ao "Mth.random"
})

o "DISPATCH" é onde a função sera chamada.

Na parte para o usuário:
    <p>Número: {number}</p>
    <button onClick={dispatch}>Alterar N°</button>

_________________________________________________________________
_________________________________________________________________
_________________________________________________________________

***Avançando em useReducer***
Caso o useReducer fosse utilizado como no exemplo passado, não teria tanta diferença do useState.
Sendo assim o reducer geralmente contém operações ais complexas, utilizando a estrutura "switch" junto do "action".
Isso foi mostrado na seção: Context API.

Para iniciar é criado um vetor, para iniciar o Reducer com esses valores:
const initialTasks = [
    {id:1,text:"Fazer alguma coisa"},
    {id:2,text:"Fazer outra coisa"},
];

Sera criada uma função Reducer:

const taskReducer = (state,action)=>{

}

Aqui sera declarado o Reducer junto do useState:

const [taskText,setTaskText] = useState("")
const [tasks, dispatchTasks] = useReducer(taskReducer,initialTasks)

/\ Aqui no caso está sendo conectado o useReducer com a função taskReducer, para que seja feita feita uma manupulação.

**Na parte de exebição:**
<form onSubmit={handleSubmit}>
    <input type="text" onChange={(e)=>setTaskText(e.target.value)} value={taskText}/>
    <input type="submit" value="Enviar">
</form>
{tasks.map((task)=>(
    <li key={task.id}>{task.text}</li>
))}

Necessário criar uma função handleSubmit para fazer o envio:

const handleSubmit=(e)=>{
    e.preventDefault();
    dispatchTasks()
    // /\ esse "dispatchTasks" irá mandar a criação da tarefa. 
}

Agora irá criar ações para taskReducer:

const taskReducer = (state,action)=>{
    switch (action.type){
        case "ADD":
            const newTask = {
                id:Math.random(),
                text: taskText
            }
        setTaskText("")//está zerando, para receber uma nova tarefa.

        return [...state,newTask] // irá retornar as tarefas antigas + a nova tarefa.
    }
}

Sendo necessário agora voltar para o handleSubmit e invovar a type: "ADD":
const handleSubmit=(e)=>{
    e.preventDefault();
    dispatchTasks({type: "ADD"})
    // /\ esse "dispatchTasks" irá mandar a criação da tarefa. 
}

***Caso o usuário já tenha feito uma tarefa e queria deltetar:***

const taskReducer = (state,action)=>{
    switch (action.type){
        case "ADD":
            const newTask = {
                id:Math.random(),
                text: taskText
            }
        setTaskText("")//está zerando, para receber uma nova tarefa.

        return [...state,newTask] // irá retornar as tarefas antigas + a nova tarefa.

        ***Parte nova***
        case "DELETE":
            return state.filter((task)=>task.id !==action.id) //aqui no caso a "action.id" irá pegar um id, toda id que não seja essa id pega irá retornar, a id pega será deletada.

        default:
            return state;
    }
}

**Na parte do usuário**
Será acrescentado "onDoubleClick={()=>removeTask()}":

<li key={task.id} onDoubleClick={()=>removeTask(task.id)}>{task.text}</li>

Com isso sendo necessário criar uma nova função:

const removeTask =(id)=>{
    dispatchTasks({type:"DELETE",id})
}

_________________________________________________________________
_________________________________________________________________
_________________________________________________________________

***useEffect***
O "useEffect" é utilizado para várias ações no nosso App, junto com useState é um dos hooks mais utilizados. Sendo possível realizar desde alterações na DOM a requisições HTTP.
O grande motivo é:conseguimos controlar quantas vezes algo acontece, a sintaxe é formada por uma fução a ser executada e um arrau d dependências.

*** 6 - useEffect com array vazio ***
Uma estratégia interessante para algumassituações é utilizar o useEffect apenas uma vez.
Para isso apenas precisamos deixar o array de dependências vazio.
Ao renderizar o componente a lógica será executada.

exemplo:
useEffect(() => {
    console.log("Será executado somente 1x.");
}, []);

*** 7 - Array de dependências do useEffect ***
Outra maneira de controlar quando o useEffect será executado é "colocando algum item no array de dependência".
Assim sempre que um item for alterado, teremos o useEffect sendo executado novamente.
Nos fornecendo um maior controle de quando a função deve ou não ser executada.

exemplo:
const [anotherNumber, setAnotherNumber] = useState(1);
useEffect(() => {
    console.log("Sou executado somente quando o anotherNumber mudar!");
}, [anotherNumber]);

É possível colocar um "if" dentro do useEffect do anotherNumber, para fazer uma verificação se o anotherNumber for < 0.

*** 8 - Limpeza do useEffect ***
Alguns efeitos precisam ter um "técnica de cleanup(limpeza)" para garantir o seu funcionamento.
Não fazer isso pode gerar "erros de compotamento indesejados".
Exemplo: um timeout que ao mudar de pg pode continuar a ser executado, motivado pela falta dessa limpeza.

Na prática vamos ter um useEffect sendo utilizado, para que ele seja "pausado" é necessário criar uma variavel que no final retorne vázia, ou mais simplemente seja limpa.
Exemplo:
useEffect(() => {
    const timer = setTimeout(() => {
      console.log("Olá mundo.");
      setAnotherNumber(anotherNumber + 1);
    }, 2000);
    return () => clearTimeout(timer); //<< isso pode gerar um ERRO/vazamento de memória, se não for colocado.
  }, [anotherNumber]);

_________________________________________________________________
_________________________________________________________________
_________________________________________________________________

*** 9 - useContext ***
É o hook utilizado para consumir contexto, da Context API.
Sendo necessário criar também um "Provider", para 'envolver os componentes" que receberão os valores compartilhados.
Para no final fazer o uso do hook onde é necessário.

É necessário criar um arquivo, no caso HookUseContext.jsx, nele irá conter a base do código.

import { createContext } from "react";

export const SomeContext = createContext();

// PROVIDER
export const HookUseContext = ({ children }) => {
  const contextValue = "testing context";

  return (
    <SomeContext.Provider value={{contextValue}}>{children}</SomeContext.Provider>
  );
};

Depois é necessário fazer a chamada do mesmo no App.jsx, "englobando" tudo para ele ficar no topo da hierarquia, lembrando de fazer o import normal:

 <HookUseContext>
    --TUDO TEM QUE FICAR AQUI DENTRO--
 </HookUseContext>

 Depois nos outros arquivos, Home e About, é necessário fazer o consumo desse Context:

//useContext
import { useContext } from "react";
import { SomeContext } from "../components/HookuseContext";

Essa parte \/ fica dentro da function:
//vou consumir o Context
  const { contextValue } = useContext(SomeContext);

Essa parte fica dentro do return():
      <p>Valor do useContext: {contextValue}</p>

No resumo, utilizando o useContext evita de ficar tendo de usar "props" para fazer esse tipo de chamada. Ganhando tempo na criação do projeto.

_________________________________________________________________
_________________________________________________________________
_________________________________________________________________

*** 10 - useRef ***
O "useRef" pode ser utilizado como useState para gerenciar valores. Sua diferença é que ele é um "objeto", seu valor está na propriedade "current".
Outra particularidade do useRed é que ele não re-renderiza o componente ao ser alterado, sendo interessante alguns casos.

A chamada dele no arquivo Home.jsx é normal.
Agora esse \/ é sua configuração, porém por algum movito ao clicar em qualquer dos botões, counter ou counterB, ele irá exibir no lugar do numberRef.current 2.
Tentei modificar isso mas não consegui.

import { useEffect, useState, useRef } from "react";

export function HookUseRef() {
  // 10 - useRef
  //criando referencia = Ref
  const numberRef = useRef(0);
  const [counter, setCounter] = useState(0);
  const [counterB, setCounterB] = useState(0);

  useEffect(() => {
    numberRef.current = numberRef.current + 1;
    //caso eu coloque um:
    // setCounter(counter+1);
    //é gerado um loop infinito e ele fica disparando número infinitamente.
  });

  return (
    <>
      <h2>useRef</h2>
      {/* Para se fazer o acesso, no useRef, é utilizando o ".current" */}
      <p>O componente renderizou: {numberRef.current} vezes</p>
      <p>Counter 1: {counter}</p>
      <button onClick={() => setCounter(counter + 1)}>Contador A</button>
      <p>Counter 1: {counterB}</p>
      <button onClick={() => setCounterB(counterB + 1)}>Contador B</button>
      {/* ideia aqui é: mapear quantas vezes o componente revisou o numberRef, para conseguir altarar o valor dele via useEffect. Para verificar se ele está rederizando o componente, onde o objtivo é ele nao fazer isso. */}
    </>
  );
}

_________________________________________________________________
_________________________________________________________________
_________________________________________________________________

*** 11 - useRef e DOM ***
O "useRef" pode ser utilziado para selecionar elementeos JSX, com isso podemos fazer manipulação de DOM ou aplicar funçõe como a focus, que foca no input.
Este é um outro uso muito interessante para este hook.

Necessário criar:
const inputRef = useRef();
  const[text,setText]=useState("")
  const handleSubmit=(e)=>{
    e.preventDefault();
    // console.log(inputRef)

    setText("") //reseta o valor do input.

    inputRef.current.focus(); //depois de enviar o input, ele irá voltar e focar no input, ficando com aquela marcação para digitar.
}

Na parte do usuário:
<form onSubmit={handleSubmit}>
    <input type="text" ref={inputRef} value={text} onChange={(e)=>setText(e.target.value)}/>
    <input type="submit" value="Enviar" />
</form>